/**
 * @brief Exibe um sub-menu para o usuário escolher entre Médico ou Paciente.
 * @param acao Uma string descrevendo a ação (ex: "remover", "listar").
 * @return O protocolo escolhido (PROTOCOLO_MEDICO ou PROTOCOLO_PACIENTE).
 */
int obter_protocolo(const char *acao) {
    int protocolo;
    Limpar_Tela();
    printf("Voce deseja %s um medico ou um paciente?\n", acao);
    printf("Digite 0 para Medico ou 1 para Paciente: ");
    buffer_completo(&protocolo, PROTOCOLO_MEDICO, PROTOCOLO_PACIENTE);
    return protocolo;
}
//

Assim como você unificou a função de gerar ID, você pode fazer o mesmo com as três funções de
 redimensionamento (redimensionar_vetor_medico, _paciente, _consulta), que são quase idênticas.
Isso reduzirá a repetição de código.

//

buscar indice por id
/**
 * @brief Busca por um ID em um vetor genérico e retorna o índice.
 * @param ptr Ponteiro para o vetor (VetMedicos* ou VetPacientes*).
 * @param protocolo O tipo de entidade a ser buscada.
 * @param id_procurado O ID a ser encontrado.
 * @return O índice do elemento se encontrado, ou -1 se não encontrado.
 */
int buscar_indice_por_id(void *ptr, int protocolo, int id_procurado) {
    if (protocolo == PROTOCOLO_MEDICO) {
        VetMedicos *vetor_med = (VetMedicos *)ptr;
        for (int i = 0; i < vetor_med->qtd; i++) {
            if (vetor_med->ponteiro_med[i].id == id_procurado) {
                return i; // Retorna o índice encontrado
            }
        }
    } else if (protocolo == PROTOCOLO_PACIENTE) {
        VetPacientes *vetor_pac = (VetPacientes *)ptr;
        for (int i = 0; i < vetor_pac->qtd; i++) {
            if (vetor_pac->ponteiro_pac[i].id == id_procurado) {
                return i; // Retorna o índice encontrado
            }
        }
    }
    return -1; // Retorna -1 se não encontrou
}
dps eu faco essa bosta

//
declarar as funcoes necessarias para static